--- programs/server/app/app.js	2022-09-02 15:39:37.000000000 +0100
+++ programs/server/app/app.js.new	2022-09-06 08:28:59.936038012 +0100
@@ -838801,7 +838801,7 @@
       sources: ["app/authorization/server/methods/removeUserFromRole.ts"],
       names: [],
       mappings: "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",
-      sourcesContent: ["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\nimport type { IRole, IUser } from '@rocket.chat/core-typings';\nimport { Roles } from '@rocket.chat/models';\n\nimport { Users } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { hasPermission } from '../functions/hasPermission';\nimport { api } from '../../../../server/sdk/api';\nimport { apiDeprecationLogger } from '../../../lib/server/lib/deprecationWarningLogger';\n\nMeteor.methods({\n\tasync 'authorization:removeUserFromRole'(roleId, username, scope) {\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId || !hasPermission(userId, 'access-permissions')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Access permissions is not allowed', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t\taction: 'Accessing_permissions',\n\t\t\t});\n\t\t}\n\n\t\tif (!roleId || !_.isString(roleId) || !username || !_.isString(username)) {\n\t\t\tthrow new Meteor.Error('error-invalid-arguments', 'Invalid arguments', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t});\n\t\t}\n\n\t\tlet role = await Roles.findOneById<Pick<IRole, '_id'>>(roleId, { projection: { _id: 1 } });\n\t\tif (!role) {\n\t\t\trole = await Roles.findOneByName<Pick<IRole, '_id'>>(roleId, { projection: { _id: 1 } });\n\t\t\tif (!role) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-role', 'Invalid Role', {\n\t\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tapiDeprecationLogger.warn(\n\t\t\t\t`Calling authorization:removeUserFromRole with role names will be deprecated in future versions of Rocket.Chat`,\n\t\t\t);\n\t\t}\n\n\t\tconst user = Users.findOneByUsernameIgnoringCase(username, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\troles: 1,\n\t\t\t},\n\t\t}) as Pick<IUser, '_id' | 'roles'>;\n\n\t\tif (!user || !user._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t});\n\t\t}\n\n\t\t// prevent removing last user from admin role\n\t\tif (role._id === 'admin') {\n\t\t\tconst adminCount = Meteor.users\n\t\t\t\t.find({\n\t\t\t\t\troles: {\n\t\t\t\t\t\t$in: ['admin'],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.count();\n\n\t\t\tconst userIsAdmin = user.roles?.indexOf('admin') > -1;\n\t\t\tif (adminCount === 1 && userIsAdmin) {\n\t\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Leaving the app without admins is not allowed', {\n\t\t\t\t\tmethod: 'removeUserFromRole',\n\t\t\t\t\taction: 'Remove_last_admin',\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tapi.broadcast('user.roleUpdate', {\n\t\t\t\ttype: 'removed',\n\t\t\t\t_id: role._id,\n\t\t\t\tu: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername,\n\t\t\t\t},\n\t\t\t\tscope,\n\t\t\t});\n\t\t}\n\n\t\treturn remove;\n\t},\n});\n"]
+      sourcesContent: ["import { Meteor } from 'meteor/meteor';\nimport _ from 'underscore';\nimport type { IRole, IUser } from '@rocket.chat/core-typings';\nimport { Roles } from '@rocket.chat/models';\n\nimport { Users } from '../../../models/server';\nimport { settings } from '../../../settings/server';\nimport { hasPermission } from '../functions/hasPermission';\nimport { api } from '../../../../server/sdk/api';\nimport { apiDeprecationLogger } from '../../../lib/server/lib/deprecationWarningLogger';\n\nMeteor.methods({\n\tasync 'authorization:removeUserFromRole'(roleId, username, scope) {\n\t\tconst userId = Meteor.userId();\n\n\t\tif (!userId || !hasPermission(userId, 'access-permissions')) {\n\t\t\tthrow new Meteor.Error('error-action-not-allowed', 'Access permissions is not allowed', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t\taction: 'Accessing_permissions',\n\t\t\t});\n\t\t}\n\n\t\tif (!roleId || !_.isString(roleId) || !username || !_.isString(username)) {\n\t\t\tthrow new Meteor.Error('error-invalid-arguments', 'Invalid arguments', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t});\n\t\t}\n\n\t\tlet role = await Roles.findOneById<Pick<IRole, '_id'>>(roleId, { projection: { _id: 1 } });\n\t\tif (!role) {\n\t\t\trole = await Roles.findOneByName<Pick<IRole, '_id'>>(roleId, { projection: { _id: 1 } });\n\t\t\tif (!role) {\n\t\t\t\tthrow new Meteor.Error('error-invalid-role', 'Invalid Role', {\n\t\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tapiDeprecationLogger.warn(\n\t\t\t\t`Calling authorization:removeUserFromRole with role names will be deprecated in future versions of Rocket.Chat`,\n\t\t\t);\n\t\t}\n\n\t\tconst user = Users.findOneByUsernameIgnoringCase(username, {\n\t\t\tfields: {\n\t\t\t\t_id: 1,\n\t\t\t\troles: 1,\n\t\t\t},\n\t\t}) as Pick<IUser, '_id' | 'roles'>;\n\n\t\tif (!user || !user._id) {\n\t\t\tthrow new Meteor.Error('error-invalid-user', 'Invalid user', {\n\t\t\t\tmethod: 'authorization:removeUserFromRole',\n\t\t\t});\n\t\t}\n\n\t\t// prevent removing last user from admin role\n\t\tif (role._id === 'admin') {\n\t\t\tconst adminCount = Meteor.users\n\t\t\t\t.find({\n\t\t\t\t\troles: {\n\t\t\t\t\t\t$in: ['admin'],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t.count();\n\n\t\t\tconst userIsAdmin = user.roles?.indexOf('admin') > -1;\n\t\t\tif (adminCount === 1 && userIsAdmin) {});\n\t\t\t}\n\t\t}\n\n\t\tconst remove = await Roles.removeUserRoles(user._id, [role._id], scope);\n\t\tif (settings.get('UI_DisplayRoles')) {\n\t\t\tapi.broadcast('user.roleUpdate', {\n\t\t\t\ttype: 'removed',\n\t\t\t\t_id: role._id,\n\t\t\t\tu: {\n\t\t\t\t\t_id: user._id,\n\t\t\t\t\tusername,\n\t\t\t\t},\n\t\t\t\tscope,\n\t\t\t});\n\t\t}\n\n\t\treturn remove;\n\t},\n});\n"]
     },
     _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
     hash: "f8933f5127024bb94056e4034f3cd0110bc1f55e"
@@ -838923,10 +838923,6 @@
         if ((cov_1duiyo8i3g().b[10][0]++, adminCount === 1) && (cov_1duiyo8i3g().b[10][1]++, userIsAdmin)) {
           cov_1duiyo8i3g().b[9][0]++;
           cov_1duiyo8i3g().s[19]++;
-          throw new Meteor.Error('error-action-not-allowed', 'Leaving the app without admins is not allowed', {
-            method: 'removeUserFromRole',
-            action: 'Remove_last_admin'
-          });
         } else {
           cov_1duiyo8i3g().b[9][1]++;
         }
@@ -1434546,10 +1434542,6 @@
       if ((cov_2irkdj4m1m().b[6][0]++, adminCount === 1) && (cov_2irkdj4m1m().b[6][1]++, userIsAdmin)) {
         cov_2irkdj4m1m().b[5][0]++;
         cov_2irkdj4m1m().s[14]++;
-        throw new Meteor.Error('error-action-not-allowed', 'Leaving the app without admins is not allowed', {
-          method: 'deleteUser',
-          action: 'Remove_last_admin'
-        });
       } else {
         cov_2irkdj4m1m().b[5][1]++;
       }
